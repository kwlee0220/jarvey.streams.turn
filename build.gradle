plugins {
	id 'java-library'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'maven-publish'
}

group = 'etri'
version = '0.1.0'

sourceCompatibility = '11'
targetCompatibility = '11'
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
	main {
		java {
			srcDirs 'build/generated-main-avro-java'
		}
	}
}

repositories {
	mavenLocal()
	maven {
		url "http://repo.osgeo.org/repository/release/"
		allowInsecureProtocol = true
	}
	maven {
		url "https://packages.confluent.io/maven/"
		allowInsecureProtocol = true
	}
	mavenCentral()
}

ext {
	log4j_version = '2.18.0'
	guava_version = '32.1.3-jre'
	gson_version = '2.9.0'
	
	geotools_version = '26.1'
	jts_version = '1.18.2'
	
	kafka_streams_version = '2.7.0'
	avro_version = '1.10.1'
	
	postgresql_version = '42.3.3'
	javalin_version = '4.6.3'
	okhttp_version = '4.10.0'
}

dependencies {
	implementation(project(":utils"))
	implementation(project(":utils.geo"))
	implementation(project(":jarvey.streams"))
	
	implementation "com.google.guava:guava:${guava_version}"
	
	// Log4j2 & SLF4j bridge
	implementation "org.apache.logging.log4j:log4j-api:${log4j_version}"
	implementation "org.apache.logging.log4j:log4j-core:${log4j_version}"
	implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
	
	// Kafka Streams
	implementation "org.apache.kafka:kafka-streams:${kafka_streams_version}"
	implementation ('io.confluent:kafka-streams-avro-serde:6.0.1') {
		exclude group: 'org.apache.kafka', module: 'kafka-clients'
	}
	
	// for remote state store access
	implementation "io.javalin:javalin:${javalin_version}"
	implementation "com.squareup.okhttp3:okhttp:${okhttp_version}"
	
	implementation "com.google.code.gson:gson:${gson_version}"
	
	testImplementation group: 'junit', name: 'junit', version: '4.12'
}

shadowJar {
//	classifier 'all'
	
	zip64 true
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}

task sourceJar(type: Jar) {
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
	archives shadowJar
}

publishing {
	publications {
		marmotClient(MavenPublication) {
			from components.java
			
			artifact sourceJar
			artifact javadocJar
			artifact shadowJar
		}
	}
}
